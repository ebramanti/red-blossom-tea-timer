{"version":3,"sources":["components/BrewingPaneInfo.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Countdown","Statistic","BrewingPaneInfo","temperature","leafAmount","duration","useState","timerStarted","setTimerStarted","timerDuration","setTimerDuration","Search","type","inputMode","style","maxWidth","size","defaultValue","as","min","step","enterButton","onChange","event","Duration","fromObject","seconds","Number","target","value","onSearch","previous","format","title","Date","now","undefined","onFinish","valueRender","DURATION_KEY_MAP","sec","secs","mins","isValidTea","data","name","baseHref","includes","getTeas","a","page","fetch","response","text","doc","DOMParser","parseFromString","querySelector","textContent","match","map","currentPage","numberOfPages","teas","Array","from","querySelectorAll","tag","getAttribute","filter","getTeaInfo","tea","brewingGuideContent","getElementsByClassName","lastElementChild","description","getElementsByTagName","join","brewingInfoContent","brewingInfo","element","children","isInfuserType","length","typeElement","dataElement","dataElementSelector","leafText","temperatureText","durationText","splitDurationValues","split","durationObject","i","Error","App","teaType","setTeaType","setTeas","setTea","setPage","setNumberOfPages","useEffect","teaInfo","fetchData","onTeaSelection","onPageChange","newPage","className","onClick","bordered","loading","dataSource","renderItem","item","Item","cursor","simple","current","defaultPageSize","total","defaultActiveKey","brewInstructions","index","TabPane","tab","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3f47b591.chunk.js","sourcesContent":["import { Input, Statistic } from \"antd\";\nimport { Duration } from \"luxon\";\nimport React, { FC, useState } from \"react\";\nimport { BrewInstructions } from \"../types\";\n\nconst { Countdown } = Statistic;\n\nexport const BrewingPaneInfo: FC<BrewInstructions> = ({\n  temperature,\n  leafAmount,\n  duration,\n}) => {\n  const [timerStarted, setTimerStarted] = useState<boolean>(false);\n  const [timerDuration, setTimerDuration] = useState<Duration | undefined>(\n    duration\n  );\n  return (\n    <>\n      <p>Temperature: {temperature}</p>\n      <p>Leaf quantity: {leafAmount}</p>\n      {duration && (\n        <Input.Search\n          type=\"number\"\n          inputMode=\"decimal\"\n          style={{ maxWidth: \"150px\" }}\n          size=\"large\"\n          defaultValue={duration?.as(\"seconds\")}\n          min={0}\n          step={15}\n          enterButton={timerStarted ? \"Stop\" : \"Start\"}\n          onChange={(event) =>\n            setTimerDuration(\n              Duration.fromObject({ seconds: Number(event.target.value) })\n            )\n          }\n          onSearch={() => setTimerStarted((previous) => !previous)}\n        />\n      )}\n      <Countdown\n        format=\"mm:ss\"\n        title=\"Duration\"\n        value={\n          timerStarted && timerDuration\n            ? Date.now() + timerDuration.as(\"milliseconds\")\n            : undefined\n        }\n        onFinish={() => setTimerStarted(false)}\n        valueRender={duration ? undefined : () => \"Not specified\"}\n      />\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { Button, List, Pagination, Skeleton, Tabs } from \"antd\";\nimport { Duration } from \"luxon\";\nimport { BrewingPaneInfo } from \"./components/BrewingPaneInfo\";\nimport { BrewInstructions, Tea, TeaInfo, TeaType } from \"./types\";\n\nexport const DURATION_KEY_MAP = {\n  sec: \"seconds\",\n  secs: \"seconds\",\n  min: \"minutes\",\n  mins: \"minutes\",\n} as const;\nexport type DurationKeys = keyof typeof DURATION_KEY_MAP;\n\ninterface TeaPage {\n  teas: Tea[];\n  page: number;\n  numberOfPages: number;\n}\n\nconst isValidTea = (data: { [K in keyof Tea]: Tea[K] | null }): data is Tea => {\n  return !!data.name && !!data.baseHref && !data.name.includes(\"Collection\");\n};\n\nconst getTeas = async (type: TeaType, page = 1): Promise<TeaPage> => {\n  const response = await fetch(\n    `https://redblossomtea.com/collections/${type}?page=${page}`\n  );\n  const text = await response.text();\n  const doc = new DOMParser().parseFromString(text, \"text/html\");\n  const [currentPage, numberOfPages] = doc\n    .querySelector(\"li.position\")\n    ?.textContent?.match(/\\d+/g)\n    ?.map(Number) || [1, 1];\n\n  const teas = Array.from(\n    doc.querySelectorAll<HTMLAnchorElement>(\n      \"div.product-card-details > h2.title > a\"\n    )\n  )\n    .map((tag) => ({\n      name: tag.textContent,\n      baseHref: tag.getAttribute(\"href\"),\n    }))\n    .filter(isValidTea);\n  return {\n    teas,\n    numberOfPages,\n    page: currentPage,\n  };\n};\n\nconst getTeaInfo = async (tea: Tea): Promise<TeaInfo> => {\n  const response = await fetch(`https://redblossomtea.com${tea.baseHref}`);\n  const text = await response.text();\n  const doc = new DOMParser().parseFromString(text, \"text/html\");\n  const brewingGuideContent = doc.getElementsByClassName(\"tabs-content\")[0]\n    ?.lastElementChild;\n  if (brewingGuideContent) {\n    const description = Array.from(\n      brewingGuideContent.getElementsByTagName(\"p\")\n    )\n      .map((tag) => tag.textContent)\n      .join(\"\\n\");\n    const brewingInfoContent = doc\n      .querySelector(\"h3 ~ table:last-of-type\")\n      ?.querySelectorAll(\"tbody.screen-large > tr > td\");\n    let brewingInfo: BrewInstructions[] = [];\n    if (brewingInfoContent) {\n      brewingInfo = Array.from(brewingInfoContent).map((element) => {\n        let children = Array.from(element.children);\n        const isInfuserType = children.length === 1;\n        if (isInfuserType) {\n          children = Array.from(\n            children[0].querySelectorAll('[class^=\"brew\"]')\n          );\n        }\n        const [, typeElement, dataElement] = children;\n        const type = typeElement?.textContent ?? \"\";\n        const isNestedDataElement = isInfuserType || type === \"Tea Bowl\";\n        const dataElementSelector = isNestedDataElement\n          ? \"span.data-data, span > span:last-child > span\"\n          : \"span.data-data, span:last-child > span\";\n        const [leafText, temperatureText, durationText] = Array.from(\n          dataElement.querySelectorAll<HTMLSpanElement>(dataElementSelector)\n        ).map((element) => element.textContent || \"\");\n        let duration: Duration | undefined;\n        if (durationText) {\n          const splitDurationValues = durationText.split(\" \");\n          const durationObject: {\n            [k in typeof DURATION_KEY_MAP[DurationKeys]]?: number;\n          } = {};\n          for (let i = 0; i < splitDurationValues.length; i += 2) {\n            durationObject[\n              DURATION_KEY_MAP[splitDurationValues[i + 1] as DurationKeys]\n            ] = Number(splitDurationValues[i]);\n          }\n          duration = Duration.fromObject(durationObject);\n        }\n        return {\n          type,\n          leafAmount: leafText,\n          temperature: temperatureText,\n          duration,\n        };\n      });\n    }\n    return {\n      name: tea.name,\n      description,\n      brewingInfo,\n    };\n  } else {\n    throw new Error(\n      `Error: Unable to parse brewing guide content for given tea: ${tea.name}`\n    );\n  }\n};\n\nexport default function App() {\n  const [teaType, setTeaType] = useState<TeaType>(\"all-products\");\n  const [teas, setTeas] = useState<Tea[]>([]);\n  const [tea, setTea] = useState<TeaInfo | undefined>();\n  const [page, setPage] = useState<number>(1);\n  const [numberOfPages, setNumberOfPages] = useState<number>(1);\n  useEffect(() => {\n    const fetchData = async () => {\n      const { teas, page, numberOfPages } = await getTeas(teaType);\n      setTeas(teas);\n      setPage(page);\n      setNumberOfPages(numberOfPages);\n      const teaInfo = await getTeaInfo(teas[0]);\n      setTea(teaInfo);\n    };\n    fetchData();\n  }, [teaType]);\n\n  const onTeaSelection = async (tea: Tea) => {\n    const teaInfo = await getTeaInfo(tea);\n    setTea(teaInfo);\n  };\n\n  const onPageChange = async (newPage: number) => {\n    const { teas, page, numberOfPages } = await getTeas(teaType, newPage);\n    setTeas(teas);\n    setPage(page);\n    setNumberOfPages(numberOfPages);\n  };\n\n  return (\n    <div className=\"App\">\n      <Button onClick={() => setTeaType(\"all-products\")}>All</Button>\n      <Button onClick={() => setTeaType(\"oolong\")}>Oolong</Button>\n      <Button onClick={() => setTeaType(\"black\")}>Black</Button>\n      <Button onClick={() => setTeaType(\"pu-erh\")}>Pu-erh</Button>\n      <Button onClick={() => setTeaType(\"green\")}>Green</Button>\n      <List\n        bordered\n        loading={teas.length === 0}\n        dataSource={teas}\n        renderItem={(item) => (\n          <List.Item\n            style={{ cursor: \"pointer\" }}\n            onClick={() => onTeaSelection(item)}\n          >\n            {item.name}\n          </List.Item>\n        )}\n      />\n      <Pagination\n        simple\n        current={page}\n        defaultPageSize={12}\n        total={12 * numberOfPages}\n        onChange={onPageChange}\n      />\n      {tea ? (\n        <>\n          <p>{tea.name}</p>\n          <p>{tea.description}</p>\n          <Tabs defaultActiveKey=\"1\">\n            {tea.brewingInfo.map((brewInstructions, index) => (\n              <Tabs.TabPane tab={brewInstructions.type} key={index + 1}>\n                <BrewingPaneInfo\n                  key={`${tea.name}-${brewInstructions.type}`}\n                  {...brewInstructions}\n                />\n              </Tabs.TabPane>\n            ))}\n          </Tabs>\n        </>\n      ) : (\n        <Skeleton />\n      )}\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}